---
- template:
    src: proxy.groovy
    dest: "{{ jenkins_dest }}/proxy.groovy"
  when: proxy|bool

- name: add proxy settings configuration
  shell: cat {{ jenkins_dest }}/proxy.groovy | {{ jenkins_cli_cmd }} groovy =
  when: jenkins_admin_user is defined and jenkins_admin_password is defined and proxy|bool

- name: List plugins
  shell: "{{ jenkins_cli_cmd }} list-plugins --username {{ jenkins_admin_user }} --password {{ jenkins_admin_password }} | cut -f 1 -d ' '"
  when: jenkins_admin_user is defined and jenkins_admin_password is defined and plugins is defined
  register: plugins_installed

- name: Ensure jenkins running before requesting safe restart
  service: name=jenkins state=started

- name: Install/update plugins
  shell: "{{ jenkins_cli_cmd }} install-plugin {{ item }} --username {{ jenkins_admin_user }} --password {{ jenkins_admin_password }}"
  when: jenkins_admin_user is defined and jenkins_admin_password is defined and plugins_installed.changed and plugins_installed.stdout.find('{{ item }}') == -1
  register: result
  until: result.rc == 0
  retries: 5
  delay: 10
  with_items: "{{ plugins }}"
  ignore_errors: yes
  notify:
    - 'Restart Jenkins'

- name: List plugins to be updated
  shell: "{{ jenkins_cli_cmd }} list-plugins --username {{ jenkins_admin_user }} --password {{ jenkins_admin_password }} | grep ')$' | cut -f 1 -d ' ' | awk 1 ORS=' '"
  register: plugins_updates
  when: jenkins_admin_user is defined and jenkins_admin_password is defined and (ansible_os_family == "Debian" or ansible_os_family == "RedHat")

- name: Update plugins
  shell: "{{ jenkins_cli_cmd }} install-plugin {{ item }} --username {{ jenkins_admin_user }} --password {{ jenkins_admin_password }}"
  with_items: "{{ plugins_updates.stdout.split() }}"
  when: jenkins_admin_user is defined and jenkins_admin_password is defined and plugins_updates.stdout != ''
  ignore_errors: yes
  notify:
    - 'Restart Jenkins'
